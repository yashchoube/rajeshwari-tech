name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd tests && npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Start development server
      run: |
        npm run dev &
        sleep 10
    
    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 2; done'
    
    - name: Run UI tests
      run: |
        cd tests
        npx playwright test --reporter=html,json,junit
      if: always()
    
    - name: Run API tests
      run: |
        cd tests
        npx jest tests/api --config=tests/jest.config.js --coverage
      if: always()
    
    - name: Run Newsletter tests
      run: |
        cd tests
        npx jest tests/newsletter --config=tests/jest.config.js
      if: always()
    
    - name: Run Integration tests
      run: |
        cd tests
        npx jest tests/integration --config=tests/jest.config.js
      if: always()
    
    - name: Run Performance tests
      run: |
        cd tests
        k6 run tests/performance/load/load-test.js
      if: always()
    
    - name: Run Security tests
      run: |
        cd tests
        npx jest tests/security --config=tests/jest.config.js
      if: always()
    
    - name: Generate comprehensive report
      run: |
        cd tests
        node run-tests.js
      if: always()
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          playwright-report/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  test-summary:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Generate final report
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Artifacts" >> test-summary.md
        echo "- UI Test Reports: \`artifacts/test-results-18.x/playwright-report/\`" >> test-summary.md
        echo "- API Test Reports: \`artifacts/test-results-18.x/test-results/\`" >> test-summary.md
        echo "- Coverage Reports: \`artifacts/test-results-18.x/coverage/\`" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Test Status" >> test-summary.md
        echo "- Node.js 18.x: ${{ needs.test.result }}" >> test-summary.md
        echo "- Node.js 20.x: ${{ needs.test.result }}" >> test-summary.md
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
